<?php
// +----------------------------------------------------------------------
// | [RhaPHP System] Copyright (c) 2017 http://www.rhaphp.com/
// +----------------------------------------------------------------------
// | [RhaPHP] 并不是自由软件,你可免费使用,未经许可不能去掉RhaPHP相关版权
// +----------------------------------------------------------------------
// | Author: Geeson <qimengkeji@vip.qq.com>
// +----------------------------------------------------------------------

namespace com\builder\admin\v1\controller;

use app\sys\com\ErrorMgr\common\v1\facade\EE;
use app\sys\com\EventMgr\common\v1\facade\Event;
use app\sys\com\builder\common\v1\logic\Base;
use app\sys\com\builder\common\v1\logic\ConfigCommon;
use app\sys\com\builder\common\v1\logic\FileCommon;
use app\sys\com\builder\common\v1\logic\TableCommon;
use function foo\func;
use app\sys\com\base\common\v1\controller\admin\Common;
use think\Db;
use think\facade\Request;

use FFMpeg\FFMpeg;
use FFMpeg\FFProbe;
use FFMpeg\Coordinate\Dimension;
use FFMpeg\Coordinate\TimeCode;
use FFMpeg\Format\Video\X264;
use FFMpeg\Format\Video\WMV;
use FFMpeg\Filters\Video\ExtractMultipleFramesFilter;
use think\Queue;

/**
 * Class Test
 *
 * @package com\builder\admin\v1\controller
 */
class Test extends Common {
    public $adminLogin = false;
    public $isCheckLogin = false;

    public function initialize()
    {
	    $param = Request::param();
	    // $act = $param['act'];
	    // $this->isCheckLogin = !in_array($act, ['index']);
        parent::initialize(); // TODO: Change the autogenerated stub
    }
    
    
    
	protected function parseApiComment($comment, $tag = '@api_') {
		$comment = substr($comment, 3, -2);
		$comment = explode(PHP_EOL, substr(strstr(trim($comment), $tag), strlen($tag)));
		$comment_arr = array_map(function ($item) {return trim(trim($item), ' \t*');}, $comment);
		
		foreach ($comment_arr as $item) {
			if (strpos($item, ' ')) {
				echo 'xxx' . $item;
			}
		}
		
		
		// if (count($comment) > 1) {
		// 	$key     = array_search('', $comment);
		// 	$comment = array_slice($comment, 0, false === $key ? 1 : $key);
		// }
		
		//$comment = implode(PHP_EOL . "\t", $comment) . ';';
		
		// if (strpos($comment, '{')) {
		// 	$comment = preg_replace_callback('/\{\s?.*?\s?\}/s', function ($matches) {
		// 		return false !== strpos($matches[0], '"') ? '[' . substr(var_export(json_decode($matches[0], true), true), 7, -1) . ']' : $matches[0];
		// 	}, $comment);
		// }
		return $comment_arr;
	}
	
    public function index() {
    	// http://wx.uujia.net/uustart1/test/api/v1/test/index
    	echo 111111111113;
	    define('BUILDER_CALL', 1);
	    $c = '\com\builder\admin\v1\controller\Test';
	    $re  = new \ReflectionClass($c);
	    dump($re->getDocComment());
	    // var_dump($re->getMethod('say')->getDocComment());
	    // var_dump($re->getMethod(\ReflectionMethod::IS_PUBLIC))->getDocComment();
	    $mc = $re->getMethods();
	    foreach ($mc as $item) {
	    	if ($item->isPublic()) {
			    // dump($item->getDocComment());
			    dump($item);
			    // echo $this->parseRouteComment($item->getDocComment(), '@rrr(');
		    }
	    }
	    $m = $re->getMethod('actionWithHelloJob');
	    dump($this->parseApiComment($m->getDocComment(), '@api_'));
		
	    // 获取注解语法
	    // $tableCommon = TableCommon::getInstance();
	    // $re = $tableCommon->getTableList();
	    // if (isErr($re)) {
		//     return false;
	    // }
	    //
	    // $tables = gData($re);
	    // foreach ($tables as $item) {
		//     dump(parseTableComment($item['table_comment']));
	    // }
	    
	    
	    
	    die();
    }
	
	/**
	 * 一个使用了队列的 action
	 * @api_name 而是23423
	 */
	public function actionWithHelloJob(){
		
		// 1.当前任务将由哪个类来负责处理。
		//   当轮到该任务时，系统将生成一个该类的实例，并调用其 fire 方法
		$jobHandlerClassName  = 'app\sys\com\builder\admin\v1\job\Hello';
		
		// 2.当前任务归属的队列名称，如果为新队列，会自动创建
		$jobQueueName  	  = "helloJobQueue";
		
		// 3.当前任务所需的业务数据 . 不能为 resource 类型，其他类型最终将转化为json形式的字符串
		//   ( jobData 为对象时，存储其public属性的键值对 )
		$jobData       	  = [ 'ts' => time(), 'bizId' => uniqid() , 'a' => 1 ] ;
		
		// 4.将该任务推送到消息队列，等待对应的消费者去执行
		$isPushed = Queue::push( $jobHandlerClassName , $jobData , $jobQueueName );
		
		// database 驱动时，返回值为 1|false  ;   redis 驱动时，返回值为 随机字符串|false
		if( $isPushed !== false ){
			echo date('Y-m-d H:i:s') . " a new Hello Job is Pushed to the MQ"."<br>";
		}else{
			echo 'Oops, something went wrong.';
		}
	}
	
	public function actionWithMultiTask(){
		
		$taskType = $_GET['taskType'];
		switch ($taskType) { // $whichTask
			case 'taskA':
				$jobHandlerClassName  = 'app\sys\com\builder\admin\v1\job\MultiTask@taskA';
				$jobDataArr = ['a'	=> '1'];
				$jobQueueName = "multiTaskJobQueue";
				break;
			case 'taskB':
				$jobHandlerClassName  = 'app\sys\com\builder\admin\v1\job\MultiTask@taskB';
				$jobDataArr = ['b'	=> '2'];
				$jobQueueName = "multiTaskJobQueue";
				break;
			default:
				break;
		}
		
		$isPushed = Queue::push($jobHandlerClassName, $jobDataArr, $jobQueueName);
		if ($isPushed !== false) {
			echo("the $taskType of MultiTask Job has been Pushed to ".$jobQueueName ."<br>");
		}else{
			throw new Exception("push a new $taskType of MultiTask Job Failed!");
		}
	}
	
	public function ffmpeg() {
		global $_G;
	
		// $ffmpeg = FFMpeg::create(array(
		// 	                         'timeout'        => 0,
		// 	                         'ffmpeg.threads' => 2,
		//                          ));
		// $video  = $ffmpeg->open(APP_ROOT . '/uploads/CN.rmvb');
		// $format = new X264('aac', 'libx264');
		// $format->on('progress', function ($video, $format, $percentage) {
		// 	global $_G;
		// 	static $enable = array();
		// 	if (intval($percentage) % 5 === 0 && !$enable[$percentage]) {
		// 		$_G['redis']->set('tans_1', "$percentage% completed");
		// 		$enable[$percentage] = true;
		// 	}
		// });
		// $video->filters()
		// 	->extractMultipleFrames(ExtractMultipleFramesFilter::FRAMERATE_EVERY_10SEC, APP_ROOT . '/gif/1/')
		// 	->synchronize();
		// $finalCommand = $video
		// 	->getFinalCommand($format, APP_ROOT . '/trans/0.mp4');
		// $video->save($format, APP_ROOT . '/trans/1.mp4');
		// $_G['redis']->set('tans_expend_1', '100% completed');
		$ffmpeg = FFMpeg::create([
			                         'ffmpeg.binaries'  => 'D:\Downloads\Soft\ffmpeg\ffmpeg\bin/ffmpeg.exe',
			                         'ffprobe.binaries' => 'D:\Downloads\Soft\ffmpeg\ffmpeg\bin/ffprobe.exe'
		                         ]);
		$video  = $ffmpeg->open(PUBLIC_PATH . 'upload_video/1.mp4');
		$video
			->frame(\FFMpeg\Coordinate\TimeCode::fromSeconds(10))
			->save(PUBLIC_PATH . 'upload_video/frame.jpg');
		echo 'ok';
	}

	public function ttt() {
		// $tableCommon = new TableCommon();
		// dump($tableCommon->getTableList());
		
		// $b = new \com\builder\common\v1\logic\Base();
		// dump($b->t());
		//
		// $config = ConfigCommon::getInstance();
		// $config->read('uuStart', 'index', 'mp');
		// $config->read('uuStart', 'index', 'miniapp');
		// dump($config->_path);
		//
		// $fileCommon = \com\builder\common\v1\logic\FileCommon::getInstance();
		// //$fileCommon->modelMaker('uuStart', Base::$_MODULE['c'], Base::$_APPTYPE['ma']);
		//
		// dump(getTableModuleModel('ra_uu_user', 'uu', 'index'));
		
		$config = app_config('reg_use.unique.identity_number');
		echo $config;
	}
	
	private function clear_file($dir) {
		//1、首先先读取文件夹
		$temp=scandir($dir);
		//遍历文件夹
		foreach($temp as $v){
			$a=$dir.'/'.$v;
			if(is_dir($a) && $v != 'node_modules'){//如果是文件夹则执行
				if($v=='.' || $v=='..'){//判断是否为系统隐藏的文件.和..  如果是则跳过否则就继续往下走，防止无限循环再这里。
					continue;
				}
				
				$pos = strpos($v, '._');
				
				if ($pos !== false && $pos === 0) {
					//echo "<span color='red'>$a</span>","<br/>"; //把文件夹红名输出
				}
				
				$this->clear_file($a);//因为是文件夹所以再次调用自己这个函数，把这个文件夹下的文件遍历出来
			}else{
				$pos = strpos($v, '._');
				if ($pos !== false && $pos === 0) {
					echo $a,"<br/>";
					unlink($a);
				}
			}
			
		}
	}
	
	/**
	 * http://app.uu.com/sys/admin/builder.test.clearFile
	 */
	public function clearFile() {
		// $dir = '/Volumes/2T_1_exFAT/LZ/H5/uu_admin';
		$dir = '/Volumes/2T_1_exFAT/LZ/NET/ServerDotNet';
		$this->clear_file($dir);
	}
	
	/**
	 * http://192.168.1.50:90/sys/admin/builder.test.makeM?rebuild=1
	 */
	public function makeM() {
		$package = !empty(input('package')) ? input('package') : 'app';
		$module = !empty(input('module')) ? input('module') : 'common';
		$appType = !empty(input('appType')) ? input('appType') : 'lib';
		p("开始生成模块 {$module}\n", 0);
		
		/** @var FileCommon $fileCommon */
		$fileCommon = FileCommon::getInstance();
		$fileCommon->modelMaker($package, $module, $appType);
		echo 'finish';
	}
	
	public function makeC() {
		$package = !empty(input('package')) ? input('package') : 'app';
		$module = !empty(input('module')) ? input('module') : 'api';
		$appType = !empty(input('appType')) ? input('appType') : 'lib';
		$modelModule = !empty(input('modelModule')) ? input('modelModule') : 'common';
		p("开始生成控制器 {$module}\n", 0);
		
		/** @var FileCommon $fileCommon */
		$fileCommon = FileCommon::getInstance();
		$fileCommon->controllerMaker($package, $module, $appType, $modelModule);
		echo 'finish';
	}
	
	public function makeV() {
		$package = !empty(input('package')) ? input('package') : 'app';
		$module = !empty(input('module')) ? input('module') : 'common';
		$appType = !empty(input('appType')) ? input('appType') : 'lib';
		p("开始生成验证器 {$module}\n", 0);
		
		/** @var FileCommon $fileCommon */
		$fileCommon = FileCommon::getInstance();
		$fileCommon->validateMaker($package, $module, $appType);
		echo 'finish';
	}
	
	public function makeCT() {
		define('BUILDER_CALL', 1);
		
		$package = !empty(input('package')) ? input('package') : 'app';
		$module = !empty(input('module')) ? input('module') : 'api';
		$appType = !empty(input('appType')) ? input('appType') : 'lib';
		$modelModule = !empty(input('modelModule')) ? input('modelModule') : 'common';
		p("开始解析注解 {$module}\n", 0);
		
		/** @var FileCommon $fileCommon */
		$fileCommon = FileCommon::getInstance();
		$fileCommon->commentMaker($package, $module, $appType, $modelModule);
		echo 'finish';
	}
	
	/**
	 * 根据注解生成权限规则（旅游）
	 * http://192.168.1.50:9001/sys/admin/builder.v1.test.makeCT_Yss
	 */
	public function makeCT_Yss() {
		define('BUILDER_CALL', 1);
		
		$GLOBALS['return_list'] = [];
		
		$addon_alias = !empty(input('addon_alias')) ? input('addon_alias') : 'yss';
		$package = !empty(input('package')) ? input('package') : 'yss';
		$module = !empty(input('module')) ? input('module') : 'admin';
		$appType = !empty(input('appType')) ? input('appType') : 'lib';
		$modelModule = !empty(input('modelModule')) ? input('modelModule') : 'common';
		// p("开始解析注解 {$module}\n", 0);
		//
		// /** @var FileCommon $fileCommon */
		// $fileCommon = FileCommon::getInstance();
		// $fileCommon->commentMaker($package, $module, $appType, $modelModule, 'v1', '');
		// echo 'finish';
		
		$GLOBALS['return_list'][] = "开始解析注解 {$module}";
		
		/** @var FileCommon $fileCommon */
		$fileCommon = FileCommon::getInstance();
		$re = $fileCommon->commentMaker($package, $module, $appType, $modelModule, 'v1', '');
		if (isErr($re)) {
			$GLOBALS['return_list'][] = $re['msg'];
		}
		$GLOBALS['return_list'][] = 'finish';
		
		if (input('return_html') == 1) {
			$ret = "<pre style='tab-size: 4'>" . implode('<br />', $GLOBALS['return_list']) . "</pre>";
		} else {
			$ret = implode("\n", $GLOBALS['return_list']);
		}
		
		echo $ret;
	}
	
	/**
	 * 生成
	 * http://192.168.1.50:8030/sys/admin/builder.test.makeAll?rebuild=1
	 */
	public function makeAll() {
		define('BUILDER_CALL', 1);
		#清除并关闭缓冲，输出到浏览器之前使用这个函数。
		ob_end_clean();

		#控制隐式缓冲泻出，默认off，打开时，对每个 print/echo 或者输出命令的结果都发送到浏览器。
		ob_implicit_flush(1);
		
		$GLOBALS['return_list'] = [];
		
		$package = !empty(input('package')) ? input('package') : 'app';
		$module = !empty(input('module')) ? input('module') : '';
		$appType = !empty(input('appType')) ? input('appType') : 'lib';
		$modelModule = !empty(input('modelModule')) ? input('modelModule') : 'common';
		
		/** @var FileCommon $fileCommon */
		$fileCommon = FileCommon::getInstance();
		
		// model
		$GLOBALS['return_list'][] = "开始生成模块 common";
		$fileCommon->modelMaker($package, 'common', $appType);
		$GLOBALS['return_list'][] = '';
			
			// controller admin
		$GLOBALS['return_list'][] = "开始生成控制器 admin";
		$fileCommon->controllerMaker($package, 'admin', $appType, $modelModule);
		$GLOBALS['return_list'][] = '';
		// controller api
		$GLOBALS['return_list'][] = "开始生成控制器 api";
		$fileCommon->controllerMaker($package, 'api', $appType, $modelModule);
		$GLOBALS['return_list'][] = '';
		
		// validate
		$GLOBALS['return_list'][] = "开始生成验证器 common";
		$fileCommon->validateMaker($package, 'common', $appType);
		$GLOBALS['return_list'][] = 'finish';
		
		if (input('return_html') == 1) {
			$ret = "<pre style='tab-size: 4'>" . implode('<br />', $GLOBALS['return_list']) . "</pre>";
		} else {
			$ret = implode("\n", $GLOBALS['return_list']);
		}
		
		echo $ret;
	}
	
	/**
	 * http://localhost/com/admin/builder.test.makeAll_mp?rebuild=1
	 */
	public function makeAll_mp() {
		define('BUILDER_CALL', 1);
		
		$addon_alias = !empty(input('addon_alias')) ? input('addon_alias') : '9mao';
		$package = !empty(input('package')) ? input('package') : 'mao9';
		$module = !empty(input('module')) ? input('module') : 'mp';
		$appType = !empty(input('appType')) ? input('appType') : 'mp';
		$modelModule = !empty(input('modelModule')) ? input('modelModule') : 'common';
		
		/** @var FileCommon $fileCommon */
		$fileCommon = FileCommon::getInstance();
		
		// model
		p("开始生成模块 common\n", 0);
		$fileCommon->modelMaker($package, 'common', $appType);
		p("\n", 0);
		
		// controller admin
		p("开始生成控制器 admin\n", 0);
		$fileCommon->controllerMaker($package, 'admin', $appType, $modelModule, 'v1', $addon_alias);
		p("\n", 0);
		// controller api
		p("开始生成控制器 mp\n", 0);
		$fileCommon->controllerMaker($package, 'mp', $appType, $modelModule, 'v1', $addon_alias);
		p("\n", 0);
		
		// validate
		p("开始生成验证器 common\n", 0);
		$fileCommon->validateMaker($package, 'common', $appType);
		echo 'finish';
	}
	
	public function test_event() {
		$re = Event::on('checkLogin', function ($e, \Closure $next) {
			print_r('on1 func=' . json_encode_u($e) . "<br />");
			$next();
			return EE::ok()->v(); //EE::code(110002)->v();
		});
		
		$re = Event::on('checkLogin', function ($e, \Closure $next) {
			print_r('on2 func=' . json_encode_u($e) . "<br />");
			$next();
			return EE::ok()->v();
		});
		
		//echo 'on=' . json_encode_u($re);
		
		$data = [];
		$data['r'] = 1111;
		$re = Event::t('checkLogin', $data);
		
		print_r('t=' . json_encode_u($re) . "<br />");
		
		// $a = [1,2,3];
		// $b = next($a);
		// unset($a[key($a)]);
		// dump($a);
	}
	
	
}